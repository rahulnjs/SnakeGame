package snakegame;


import config.Configuration;
import controller.Direction;
import controller.GameStarter;
import graphics.Canvas;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import org.jdesktop.application.Action;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import object.Snake;


public class SnakeGameView extends FrameView {

    public SnakeGameView(SingleFrameApplication app) {
        super(app);
        initComponents(); 
        getFrame().setTitle("Snake Game");
        this.getFrame().setPreferredSize(new Dimension(Configuration.FRAME_WIDTH, Configuration.FRAME_HEIGHT));
        this.getFrame().setResizable(false);
        doInitialize();     
    }
    
    private void doInitialize() {
        mainCanvas = new Canvas();
        this.getFrame().add(mainCanvas);
        snake = mainCanvas.getSnake();
        this.getFrame().addKeyListener(new KeyListener() {

            public void keyTyped(KeyEvent e) {}

            public void keyPressed(KeyEvent e) {
                 switch(e.getKeyCode()) {
                     case KeyEvent.VK_UP :
                         if(snake.getDirection() != Direction.DOWN) {
                            snake.setDirection(Direction.UP);
                         }
                         break;
                     case KeyEvent.VK_DOWN :
                         if(snake.getDirection() != Direction.UP) {
                            snake.setDirection(Direction.DOWN);
                         }
                         break;
                     case KeyEvent.VK_LEFT : 
                         if(snake.getDirection() != Direction.RIGHT) {
                            snake.setDirection(Direction.LEFT);
                         }
                         break;
                     case KeyEvent.VK_RIGHT : 
                         if(snake.getDirection() != Direction.LEFT) {
                            snake.setDirection(Direction.RIGHT);
                         }
                         break;  
                     case KeyEvent.VK_ESCAPE :
                         pauseGame();
                         RuleView rView = new RuleView(view);
                         break;
                 }
            }

            public void keyReleased(KeyEvent e) {}
          
            
        });
        
        gStarter = new GameStarter(mainCanvas, this.getFrame());
        t = new Timer(10, new ActionListener() {

                public void actionPerformed(ActionEvent e) {
                    counter++;
                    if(counter == 2) {
                        RuleView rView = new RuleView(view);
                        counter = 0;
                        t.stop();
                    }
                }
         });
            
        t.start();
        jMenuItem1.setText("New Game...");
        jMenuItem1.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                if(GameStarter.isGameRunning()) {
                    pauseGame();
                    int opinion = JOptionPane.showConfirmDialog(mainCanvas,
                            "Do you want to quit the current game?", "Start New Game",
                            JOptionPane.YES_NO_OPTION);
                    if(opinion == JOptionPane.YES_OPTION) {
                        startNewGame();
                    }else {
                        startGame();
                    }
                }else {
                    startNewGame();
                }
            }
        });
    }
    

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = SnakeGameApp.getApplication().getMainFrame();
            aboutBox = new SnakeGameAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        SnakeGameApp.getApplication().show(aboutBox);
    }


    public void startGame() {
        gStarter.start();
    }
    
    public void pauseGame() {
        gStarter.stop();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();

        menuBar.setName("menuBar"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(snakegame.SnakeGameApp.class).getContext().getActionMap(SnakeGameView.class, this);
        fileMenu.setAction(actionMap.get("createNewGame")); // NOI18N
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(snakegame.SnakeGameApp.class).getContext().getResourceMap(SnakeGameView.class);
        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText(resourceMap.getString("jMenuItem1.text")); // NOI18N
        jMenuItem1.setName("jMenuItem1"); // NOI18N
        fileMenu.add(jMenuItem1);

        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setMenuBar(menuBar);
    }// </editor-fold>//GEN-END:initComponents


    private void startNewGame() {
        snake = new Snake();
        mainCanvas.setSnake(snake);
        gStarter.start();
        mainCanvas.generateNewBait();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuBar menuBar;
    // End of variables declaration//GEN-END:variables

   // private JPanel canvas = new JPanel();
    private JDialog aboutBox;
    private Canvas mainCanvas;
    private GameStarter gStarter; 
    Timer t;
    int counter = 0;
    SnakeGameView view = this;
    Snake snake;
}
